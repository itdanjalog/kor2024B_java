- 다형성 :
    - ( 생활 ) 다양한 형태/모양 성질
    - ( 컴퓨터 ) 객체가 여러 가지 타입을 가질수 있는것을 으미
    - 장단점
        1. 장점 : 코드 재사용성 , 유연성 , 가독성
        2. 단점 : 복잡 하고 디버깅 힘들고 성능 손실이 발생할수 있다.
    - 분류
        1. 오버로딩 : 동일한 메소드명/생성자명 를 매개변수의 타입,개수,순서 에 따라 구분한다.
        2. 오버라이딩 : 기존 메소드의 구현부{} 재정의 해서 구분한다.
    - 상속 extends , 구현 implement 를 이용한 다형성 특징을 표현 할수 있다.

- 클래스 : 추상화(개발자 머리속에 있는)[논리적] 한 객체를 클래스로 멤버변수,생성자,메소드를 구체화 해서 정의한 객체 설계도
    - 인스턴스 : 클래스로 만든 [물리적] 객체(실체물)
    vs
- 인터페이스 : 추상화(개발자 머리속에 있는)[논리적] 한 객체를 인터페이스 로 상수 , 메소드를 선언 하고 구체화 하지 않았다.
    - 100% 다형성을 위해서 자바회사에 클래스 다음으로 만들어진 (타입) 문법.
    - ( 생활 ) 접점이나 경계면 , 예] 닌텐도 게임기기 , 리모콘 , 운영체제(윈도우) 등등
        사람 ---> 키보드[접점이나 경계면/인테페이스] ---> 메이플스토리(키우기게임)
                                                ---> 롤
                                                ---> 피파(축구게임)
    - ( 컴퓨터 ) 하나의 타입으로 여러가지 타입의 객체를 참조하는것
        개발자 ---> 인터페이스 ---> A객체( TV 클래스 )
                            ---> B객체( Audio 클래스 )
                            ---> C객체( Bulb 클래스 )
    - 왜???? 만약에 게임이 다르다고 해서 키보드가 다르면... ??? 게임마다 키보드를 사야되는지??? 게임 안함.
        - 서로 다른 게임을 하나의 키보드에서 작동하게 해주면 사용자는 좋다.. (인터페이스 통합)

    - 인터페이스 목적 : 통합( 동일한 목적하의 서로 다른 행위들 하게끔 )
        - 예] 메이플스토리 에서 a 키 눌렀을때 , 롤 에서 a 키를 눌렀을때 , 피파 에서 a 키를 눌렀을때
        - 키보드 a(통합=인터페이스) , 각 게임 마다의 a키 행동이 다르다(다형성 - 오버라이딩)

    - 인터페이스 역할
        - [ 추상 메소드 ] 행위를 선언은 하지만. 구체화 하지 않는다. 메소드의 선언부가 있지만 구현부{ }는 없다
            - 예] 키보드 회사에서 a키를 슛기능을 구체화 하면 메이플스토리에서 못쓴다.
            - abstract : 추상적인 ,
        - [ 상수 ] 인터페이스의 상태를 저장하지만, 객체가 없으므로 상수(변수의반대,고정값)만 사용할수 있다.
            - final static
                - final : 최종적 , static:정적인 => 최종 상태 => 상수 => 고정 값 => *초기화 필수

    - 추상 메소드를 구현
        - [ implement ] 메이플스토리 회사에 키보드 a 키에 대한 기능을 구체화 해야한다.( 오버라이딩 )