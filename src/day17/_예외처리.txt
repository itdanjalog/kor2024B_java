[1] 예외처리
    1. 컴파일러 : 자바언어를 컴퓨터 기계어 번역 해주는 프로그램
        개발자(영어/자바코드) -------- 컴파일러 --------> 컴퓨터(기계어)
    2. 예외처리란?
        1. 오류/에러(ERROR) : 시스템이 종료되는 수준의 심각한 문제 발생
            - 프로그램개발자가 예측하여 방지 하기 힘들다. 주로 하드웨어(메모리,CPU) 관련 오류
        2. 예외(Exception) : 개발자가 구현한 로직에서 발생한 실수 나 사용자의 영향에 의해 발생
            - 오류와 달리 프로그램개발자가 예측하여 방지가 가능하다. 예측 이므로 개발자의 경험이 중요시 된다.
    3. 예외 종류
        1. 일반예외 : 컴파일러 가 예외 처리 코드 여부를 검사하는 예외
            - 주로 자바가 외부 시스템과 연동시 발생 : 1.파일처리 2. 데이터베이스연동 3. 입출력 4.네트워크 등등
        2. 실행예외 : 컴파일러 가 예외 처리 코드 여부를 검사하지 않는 예외
            - 주로 실행 도중에 발생 : 1. 인덱스 2.타입 3. NULL 등등  #개발자의 경험의 의존성이 크다.
    4. 예외 처리 방법
        - 예외가 발생 했을때 다른 흐름으로 제어 (흐름변경) # 코드 고치거나 수정하는 작업이 아니다.
        - IF 조건문과 비슷하면서 다르다.
        - 왜?(사용목적) : 예외 발생하면 빨강색으로 콘솔에 예외사유가 나오면서 프로그램이 강제로 종료된다.
            - 프로그램 배포시 사용자가 안전하게 24시간 사용시 예외가 발생하더라도 다른 흐름으로 제어해서 안전한 프로그램 완성하기 위해서 사용된다.
        - 자바 문법
            try{ 예외가 발생 하거나 발생 할것(예측) 같은 실행코드 }
            catch( 해당예외클래스명 변수명 ){ 예외 발생했을때 실행코드 }
            finally{ 예외가 있던없던 실행되는 코드 }

    5. 예외 클래스
        * Exception 클래스 : 모든 예외 클래스의 상위클래스 # 즉) Exception 클래스는 모든 예외를 처리 할수 있다.
            - 모든 예외처리시 사용되는 클래스
            - 다중 catch 에서는 마지막에 사용를 해야한다.

        - Exception 하위 클래스를 이용한 다양한 흐름제어를 하기위해서 사용된다.
        (1) 일반 예외 클래스
            1. ClassNotFoundException : 지정한 클래스가 존재하지 않으면 예외 발생 하는 클래스명
        (2) 실행 예외 클래스
            2. *NullPointerException : 지정한 객체가 Null 이므로 객체를 참조할수 없을때 예외 발생 하는 클래스명
            3. NumberFormatException : 지정한 데이터를 정수타입 으로 변환할수 없을때 예외 발생 하는 클래스명
            4. ArrayIndexOutOfBoundsException : 지정한 인덱스가 존재하지 않을때 예외 발생 하는 클래스명
            5. InputMismatchException : 지정한 데이터의 타입이 일정하지 않을떄 예외 발생하는 클래스

    6. 예외 던지기/떠넘기기
        - 여러 곳에서 발생하는 예외를 특정한 곳에서 한번에 처러하기 위해서 사용된다. ( 가독성 높이기 위해서 )
            - 예외(쓰레기)를 스레기장에 버리면 폐기물차가 수거해서 폐기물소각장에서 처리하는것과 같다.
            - 예외를 던지면 특정한곳에서 예외 처리하는 방식 이다.
        - 해당 함수를 호출했던 곳으로 예외 떠넘기기 - 리턴 비슷과 하다.
        - 반환타입 함수명( 매개타입 매개변수) throws 예외클래스{ }








