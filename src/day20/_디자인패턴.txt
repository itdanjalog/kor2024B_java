[0] 패턴
    - 되풀이되는 사건이나 물체의 형태
    - 디자인 패턴 : 프로그램 개발에서 빈번하게 나타나는 문제를 해결하기 위한 방법
[1] MVC 패턴
    - M(model) V(view) C(control)
    - 정의 : 소프트웨어 개발에서 많이 사용되는 패턴 중 하나로, 소프트웨어를 세 가지 주요 부분으로 구성
    - 목적 : 특정한 역할을 수행하여 소프트웨어의 구조와 관리 개선, 코드의 재사용성과 유지보수성을 높일수 있다.
    - 세가지 주요 부분
        model : 데이터와 비지니스 로직 포함
        view : 사용자에게 정보를 표시하는 역할
        controller : 입력을 받아 처리하고 적절한 응답을 모델과 뷰 사이에서 조정 역할
        [요청]
        유저---> view ----> controller -----> model ----> DataBase
        [응답]
        유저<--- view <---- controller <---- model <---- DataBase
    - 예시1]
        - 1인식당의 사장님은 재료관리 , 요리 , 서빙 를 모두 한사람이 한다. ( 문제없이 식당은 영업이 가능하다 )
        - 1인식당 이였던 가게가 장사가 번창해서 규모가 커졌다. ( 혼자서는 감당이 안된다. )
        - 직원/알바 구인 : 파트별 직원 : 서빙알바 , 요리직원 , 재료관리직원 ( 업무 분담을 이용한 책임자 )
    - 예시2]
        - 소규모 코드 였던 입출력 , 로직 , DB처리 등 를 모두 한 클래스가 한다. # 문제없이 로직은 실행된다.
        - 소규모 코드 였던 프로그램이 다양한 기능이 추가 하므로 규모가 커졌다. # 코드 구분이 힘들다
        - 파트별로 코드 구분 : View(입출력) CONTROLLER( model과view 조정 ) Model( data ) , # 코드 분담을 이용한 유지보수

    - JAVA CONSOLE 에서 MVC 패턴을 표현하는 방법
        1. VIEW 역할 : 입(Scanner) , 출(Print)
        2. Controller 역할 : view 와 model 사이에 데이터 전달 , 유효성검사 , 타입변환
        3. Model 역할
            Dto : Data Transfer Object 데이터 이동 객체 # 서로 다른 계층간의 이동하는 객체 # view <-dto-> controller <-dto-> Dao
            Dao : Data Access Object 데이터 접근 객체 # 데이터베이스 접근 객체
            VO  : Value Object 값 객체 # 수정 불가능 객체 # 읽기모드 객체

[2] 싱글톤 패턴
    - 정의 : 클래스의 인스턴스(객체)가 단 하나만 생성되도록 보장하는 디자인 패턴 입니다.
    - 목적 : 프로그램 전역에서 동일한(하나의) 인스턴스를 공유 할 수 있다.
    - 장/단점
        1. 장점 : 1. 전역접근 2.메모리 절약 3. 전역상태관리 4.정적(static) 메소드와 결합
        2. 단점 : 1. 의존성주입(DI) 사용이 어렵다 2. 객체생명주기 관리힘듬 3.동기화 문제
    - 자바에서 싱글톤을 만드는 방법
        1. 클래스 생성자의 private 이용한 외부 에서의 생성자 접근 차단 한다.
        2. 내부 클래스의 private static final 객체를 생성한다.
        3. 내부 객체를 외부 에서의 접근를 하는 public static 메소드 선언한다.
    - 외부 클래스에서 싱글톤 호출하는 방법
        - 클래스명.getInstance()









